
import streamlit as st

st.set_page_config(page_title="Entrenamiento cl√≠nico", layout="centered")

casos = {
    "EXB1": "Exblifep - ITU complicada con BLEE",
    "EXB2": "Exblifep - NAC nosocomial + BLEE",
    "EXB3": "Exblifep - Bacteriemia sin foco",
    "EXB4": "Exblifep - Postquir√∫rgico abdominal + AmpC",
    "EXB5": "Exblifep - ITU + OXA-48",
    "EXB6": "Exblifep - Pielonefritis con alergia m√∫ltiple",
    "EXB7": "Exblifep - Infecci√≥n intraabdominal complicada",
    "EXB8": "Exblifep - Rotaci√≥n antibi√≥tica en planta",
    "EXB9": "Exblifep - Sepsis urinaria con mal control gluc√©mico",
    "EXB10": "Exblifep - ITU en paciente paliativo",
    "ZEV1": "Zevtera - NAC grave + S. pneumoniae",
    "ZEV2": "Zevtera - Neumon√≠a nosocomial con SARM",
    "ZEV3": "Zevtera - Bacteriemia por SCN",
    "ZEV4": "Zevtera - Endocarditis por S. aureus",
    "ZEV5": "Zevtera - Celulitis en inmunodeprimido",
    "ZEV6": "Zevtera - VIH + NAC moderada",
    "ZEV7": "Zevtera - Hemodi√°lisis con S. aureus",
    "ZEV8": "Zevtera - Neumon√≠a postintubaci√≥n",
    "ZEV9": "Zevtera - Osteomielitis por SARM",
    "ZEV10": "Zevtera - NAC con alergia a glicop√©ptidos"
}

if "caso" not in st.session_state:
    st.session_state.caso = None
    st.session_state.step = 0

def feedback(color, texto):
    if color == "verde":
        st.success("üü¢ " + texto)
    elif color == "amarillo":
        st.warning("üü° " + texto)
    elif color == "rojo":
        st.error("üî¥ " + texto)

# Men√∫ inicial
if st.session_state.caso is None:
    st.title("üß™ Entrenamiento cl√≠nico interactivo")
    seleccion = st.selectbox("Selecciona un caso:", [""] + [f"{k} - {v}" for k, v in casos.items()])
    if seleccion and st.button("Iniciar caso"):
        st.session_state.caso = seleccion.split(" - ")[0]
        st.session_state.step = 0
        st.rerun()

# Diccionario con todos los pasos de los 20 casos (resumen simulado aqu√≠)
pasos = {
    "EXB1": [
        ("Paciente con sepsis urinaria y BLEE previa. ¬øEmp√≠rico?", ["Meropenem", "Pip/tazo", "Exblifep"],
         ["rojo", "amarillo", "verde"],
         ["Uso innecesario de carbapenem.", "Cobertura inadecuada.", "Alternativa v√°lida a carbapenem."]),
        ("Cultivo: BLEE sensible a cotrimoxazol. ¬øAjuste?", ["Mantener Exblifep", "Cambiar a oral", "Suspender"],
         ["amarillo", "verde", "rojo"],
         ["Podr√≠a mantenerse si no hay v√≠a oral.", "Buena opci√≥n si tolera oral.", "Suspensi√≥n prematura."]),
        ("¬øDuraci√≥n total?", ["3 d√≠as", "7 d√≠as", "14 d√≠as"],
         ["rojo", "verde", "amarillo"],
         ["Insuficiente.", "Duraci√≥n adecuada.", "Podr√≠a ser excesivo."]),
        ("¬øPlan al alta?", ["Nada", "Cotrimoxazol oral", "Exblifep domiciliario"],
         ["rojo", "verde", "amarillo"],
         ["Alta sin completar puede ser riesgosa.", "Correcto si tolera oral.", "Menos pr√°ctico en domicilio."])
    ]
    # Los 19 casos restantes se incluir√≠an aqu√≠ con su narrativa y pasos detallados
}

# Renderizado
if st.session_state.caso:
    st.title(f"üßæ Caso: {casos[st.session_state.caso]}")
    secuencia = pasos.get(st.session_state.caso, [])
    if st.session_state.step < len(secuencia):
        pregunta, opciones, colores, textos = secuencia[st.session_state.step]
        opcion = st.radio(f"**{pregunta}**", opciones, index=None)
        if opcion:
            idx = opciones.index(opcion)
            feedback(colores[idx], textos[idx])
            st.button("Siguiente", on_click=lambda: st.session_state.update(step=st.session_state.step + 1))
    else:
        st.success("üéâ ¬°Caso completado!")
        if st.button("Volver al men√∫"):
            st.session_state.caso = None
            st.session_state.step = 0
            st.rerun()
